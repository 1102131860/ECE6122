/*
Author: Rui Wang
Class: ECE6122
Last Date Modified: Oct 22 2024
Description:
This is a shader calculating module, which runs in GPU, and loads into main function.
In this module, it also deals with the light toggling.
*/

#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Output data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;

// Material properties as uniforms
uniform vec3 Ka;  // Ambient reflectivity
uniform vec3 Kd;  // Diffuse reflectivity
uniform vec3 Ks;  // Specular reflectivity
uniform float Ns; // Shininess

// Light toggle property
uniform int lightingEnabled; // 1 if lighting is enabled, 0 otherwise

void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 100.0f;
	
	// Material properties
	vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
	// Calculate ambient color using material ambient reflectivity
	vec3 MaterialAmbientColor = Ka == vec3(0,0,0) ? MaterialDiffuseColor : Ka * MaterialDiffuseColor;
	// Use material specular reflectivty for the specular color
	vec3 MaterialSpecularColor = Ks;

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );

	// Ambient component
	vec3 ambient = MaterialAmbientColor; 

	// Diffuse component
	vec3 diffuse = Kd * MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance);

	// Specular component
	vec3 specular = MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha, Ns) / (distance * distance);
	
	// Combine the lighting components
	color = ambient + diffuse + specular;

	if (lightingEnabled == 0){
		color = ambient; // color = vec3(1.0, 0.0, 0.0); Red color indicates lighting is off
	}
}